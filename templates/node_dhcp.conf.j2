host {{ inventory_hostname_short }} {
  hardware ethernet {{ mac_addressÂ }};
  fixed-address {{  ip_address }};
  send host-name "{{ inventory_hostname_short }}.{{ dhcp_domain | default( dhcp_common_domain ) }}";

{% if use_pxe %}
  if exists ipxe.http or exists ipxe.efi {
      filename "http://{{ dhcp_server_ip }}/cgi-bin/boot.py";
  }
  elsif exists user-class and option user-class = "iPXE" {
    # We're already using iPXE, but not a feature-full version,
    # and possibly an out-of-date version from ROM, so load a more
    # complete version with native drivers
    # Allow both legacy BIOS and EFI architectures
    if option arch = 00:07 {
        filename "ipxe-x64.efi";
    } elsif option arch = 00:00 {
        filename "undionly.kpxe";
    }
  }
  elsif exists user-class and option user-class = "gPXE" {
    # If someone has an old version of gPXE burned into their ROM,
    # load a more recent iPXE
    filename "undionly.kpxe";
  }
  elsif option arch = 00:07 {
    # EFI 64-bit
    # I like to use iPXE-provided drivers, so therefore give ipxe.efi
    # to all non-iPXE clients, use snponly.efi if you have unsupported
    # or misbehaving NICs
    filename "ipxe-x64.efi";
  }
  elsif option arch = 00:00 {
    # Legacy BIOS x86 mode
    # I like to use iPXE-provided drivers, so therefore give ipxe.pxe
    # to all non-iPXE clients, use undionly.kpxe if you have unsupported
    # or misbehaving NICs
    filename "undionly.kpxe";
  }
{% endif %}
}
